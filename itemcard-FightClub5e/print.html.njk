{% macro iTypeExplain(type) %}
    {% if type == "W" %}Wondrous Item{% endif %}
    {% if type == "A" %}Ammunition{% endif %}
    {% if type == "AF" %}Ammunition (futuristic){% endif %}
    {% if type == "AT" %}Artisan Tool{% endif %}
    {% if type == "EM" %}Eldritch Machine{% endif %}
    {% if type == "EXP" %}Explosive{% endif %}
    {% if type == "G" %}Adventuring Gear{% endif %}
    {% if type == "GS" %}Gaming Set{% endif %}
    {% if type == "HA" %}Heavy Armor{% endif %}
    {% if type == "INS" %}Instrument{% endif %}
    {% if type == "LA" %}Light Armor{% endif %}
    {% if type == "M" %}Melee Weapon{% endif %}
    {% if type == "MA" %}Medium Armor{% endif %}
    {% if type == "MNT" %}Mount{% endif %}
    {% if type == "GV" %}Generic Variant{% endif %}
    {% if type == "P" %}Potion{% endif %}
    {% if type == "R" %}Ranged Weapon{% endif %}
    {% if type == "RD" %}Rod{% endif %}
    {% if type == "RG" %}Ring{% endif %}
    {% if type == "S" %}Shield{% endif %}
    {% if type == "SC" %}Scroll{% endif %}
    {% if type == "SCF" %}Spellcasting Focus{% endif %}
    {% if type == "OTH" %}Other{% endif %}
    {% if type == "T" %}Tool{% endif %}
    {% if type == "TAH" %}Tack and Harness{% endif %}
    {% if type == "TG" %}Trade Good{% endif %}
    {% if type == "$" %}Treasure{% endif %}
    {% if type == "VEH" %}Vehicle (land){% endif %}
    {% if type == "SHP" %}Vehicle (water){% endif %}
    {% if type == "AIR" %}Vehicle (air){% endif %}
    {% if type == "WD" %}Wand{% endif %}
{% endmacro %}
{% macro dTypeExplain(type) %}
    {% if type == "A" %}Acid{% endif %}
    {% if type == "B" %}Bludgeoning{% endif %}
    {% if type == "C" %}Cold{% endif %}
    {% if type == "F" %}Fire{% endif %}
    {% if type == "O" %}Force{% endif %}
    {% if type == "L" %}Lightning{% endif %}
    {% if type == "N" %}Necrotic{% endif %}
    {% if type == "P" %}Piercing{% endif %}
    {% if type == "I" %}Poison{% endif %}
    {% if type == "Y" %}Psychic{% endif %}
    {% if type == "R" %}Radiant{% endif %}
    {% if type == "S" %}Slashing{% endif %}
    {% if type == "T" %}Thunder{% endif %}
{% endmacro %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>D&D Item Block</title>
    <style>
        @font-face {
            font-family: "scaly-sans-caps";
            src: url("/proxy/https://github.com/jonathonf/solbera-dnd-fonts/raw/master/Scaly%20Sans%20Caps/Scaly%20Sans%20Caps.otf") format("opentype");
            font-weight: normal;
        }
        @font-face {
            font-family: "scaly-sans-caps-bold";
            src: url("/proxy/https://github.com/jonathonf/solbera-dnd-fonts/raw/master/Scaly%20Sans%20Caps/Scaly%20Sans%20Caps%20Bold.otf") format("opentype");
            font-weight: bold;
        }
        @font-face {
            font-family: "scaly-sans";
            src: url("/proxy/https://github.com/jonathonf/solbera-dnd-fonts/raw/master/Scaly%20Sans/Scaly%20Sans.otf") format("opentype");
            font-weight: normal;
        }
        @font-face {
            font-family: "scaly-sans-italic";
            src: url("/proxy/https://github.com/jonathonf/solbera-dnd-fonts/raw/master/Scaly%20Sans/Scaly%20Sans%20Italic.otf") format("opentype");
            font-weight: normal;
        }
        @font-face {
            font-family: "scaly-sans-bold";
            src: url("/proxy/https://github.com/jonathonf/solbera-dnd-fonts/raw/master/Scaly%20Sans/Scaly%20Sans%20Bold.otf") format("opentype");
            font-weight: bold;
        }
        @font-face {
            font-family: "scaly-sans-bold-italic";
            src: url("/proxy/https://github.com/jonathonf/solbera-dnd-fonts/raw/master/Scaly%20Sans/Scaly%20Sans%20Bold%20Italic.otf") format("opentype");
            font-weight: bold;
        }
        body {
            font-family: 'scaly-sans', serif;
            font-size: 1.4em
        }
        .stat-block {
            padding-top: 20px;
            padding-left: 20px;
            padding-right: 20px;
            border: 3px solid black;
            border-radius: 8px;
        }
        .number {
            font-family: "scaly-sans-caps";
        }
        .item-name {
            font-family: "scaly-sans-caps-bold";
            font-size: 1.5em;
            font-weight: bold;
            color: black;
            text-align: left;
            border-bottom: 2px solid black;
            padding-bottom: 5px;
        }
        .meta {
            font-family: "scaly-sans-italic";
            line-height: 1.2em;
            color: black;
            margin-top: 10px;
            margin-bottom: 10px;
        }
        .section {
            margin-top: 10px;
            padding-top: 5px;
        }
        .section-title {
            font-family: "scaly-sans-caps";
            font-size: 1.4em;
            color: black;
            border-bottom: 2px solid black;
        }
        .section strong {
            font-family: "scaly-sans-bold-italic";
        }
        .randomtable {
            margin: 0; 
            padding: 0; 
            border-collapse: collapse;
            width: 100%;
        }
        .randomtable td {
            padding: 0.4em;
            border: 1px solid black;
            vertical-align: top;
        }
        .randomtable th {
            font-weight: bold;
            padding: 0.4em;
            border: 1px solid black;
            vertical-align: top;
            text-align: left;
        }
    </style>
    <script>
        function convText() {
            const data = JSON.parse(`{{ it | json }}`);
            const srcText = data.text;
            document.write(`<div class="text">`);
            if (srcText && srcText instanceof Array) {
                let inTable = false;
                let inHeader = false;
                srcText.forEach((textElem) => {
                    if (textElem.includes(" | ")) {
                        if (!inTable) {
                            inTable = true;
                            inHeader = true;
                            document.write(`<table class="randomtable">`);
                        }
                        let parts = textElem.split(" | ");
                        document.write(`<tr>`);
                        parts.forEach((part) => {
                            if (inHeader) {
                                document.write(`<th>${part}</th>`);
                            } else {
                                document.write(`<td>${part}</td>`);
                            }
                        });
                        document.write(`</tr>`);
                        inHeader = false;
                    } else {
                        if (inTable) {
                            inTable = false;
                            document.write(`</table>`);
                        }
                        if (!textElem.startsWith("Source: ")) {
                            let re = /^(\w+)\./;
                            textElem = textElem.replace(re, "<strong>$1.</strong>");
                            re = /^(\w+ \(\w+\))\./;
                            textElem = textElem.replace(re, "<strong>$1.</strong>");
                            document.write(`<p>${textElem}</p>`);
                        }
                    }
                });
            } else {
                if (!srcText.startWith("Source: ")) {
                    // TODO: check for keyword match
                    //const re = /^\w+ (\w+)\.\w+/;
                    const re = /^.*$/;
                    srcText = srcText.replace(re, "<strong>$1</strong>");
                    document.write(`<p>${srcText}</p>`);
                }
            }
            document.write(`</div>`);
        }
        function source() {
            const data = JSON.parse(`{{ it | json }}`);
            const srcText = data.text;
            if (srcText && srcText instanceof Array) {
                srcText.forEach((textElem) => {
                    if (textElem.startsWith("Source: ")) {
                        document.write(`<p>${textElem}</p>`);
                    }
                });
            } else {
                if (srcText.startWith("Source: ")) {
                    document.write(`<p>${srcText}</p>`);
                }
            }
        }
        function propertyStr() {
            const data = JSON.parse(`{{ it | json }}`);
            const srcProps = data.property;
            let propStr = ", ";
            if (srcProps) {
                let propsArr = srcProps.split(",");
                propsArr.forEach((prop) => {
                    switch (prop) {
                        case "T": propStr += "Thrown, "; break;
                        case "V": propStr += "Versatile, "; break;
                        case "H": propStr += "Heavy, "; break;
                        case "2H": propStr += "Two-Handed, "; break;
                        case "F": propStr += "Finesse, "; break;
                        case "L": propStr += "Light, "; break;
                        case "R": propStr += "Reach, "; break;
                        case "A": propStr += "Ammunition, "; break;
                        case "LD": propStr += "Loading, "; break;
                        case "S": propStr += "Special, "; break;
                        case "AF": propStr += "Ammunition (futuristic), "; break;
                        case "RLD": propStr += "Reload, "; break;
                        case "BF": propStr += "Burst Fire, "; break;
                    }
                });
            }
            propStr = propStr.substring(0, propStr.length-2);
            document.write(`${propStr}`);
        }

    </script>
</head>

<body>
    <div class="stat-block">
        <div class="item-name">{{ it.name.replace(" [2024]","") }}</div>
        <div class="meta">{{ iTypeExplain(it.type) }}{% if it.detail %} - {{ it.detail | capitalize }}{% endif %}<br>{% if it.weight %}{{ it.weight }} lb.{% else %}0 lb.{% endif %}<script>propertyStr()</script>{% if it.magic=="1" %}, Magical Item{% endif %}</div>
        
        {% if it.ac %}
            <div class="armorclass">
                <strong>AC</strong> {{ it.ac }}
            </div>
        {% endif %}

        {% if it.dmgType %}
            <div class="damage">
                <strong>{{ it.dmg1 }} {{ dTypeExplain(it.dmgType) }} Damage</strong>{% if it.range %}, Range {{ it.range }} ft.{% endif %}
            </div>  
        {% endif %}

        <script>convText()</script>      

        <div class="meta"><script>source()</script></div>
    </div>
</body>
</html>
